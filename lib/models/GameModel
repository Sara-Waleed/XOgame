import 'dart:math';

class Player {
  static const x = 'X';
  static const o = 'O';
  static const empty = '';
  static List<int> playerX = [];
  static List<int> playerO = [];
}

extension ContainsAll on List<int> {
  bool containsAll(int x, int y, [int? z]) {
    if (z == null) {
      return contains(x) && contains(y);
    } else {
      return contains(x) && contains(y) && contains(z);
    }
  }
}

class Game {
  void playGame(int index, String activePlayer) {
    if (activePlayer.toLowerCase() == 'x') {
      Player.playerX.add(index);
    } else {
      Player.playerO.add(index);
    }
  }

  String checkWinner() {
    String winner = '';

    if (Player.playerX.containsAll(0, 1, 2) ||
        Player.playerX.containsAll(3, 4, 5) ||
        Player.playerX.containsAll(6, 7, 8) ||
        Player.playerX.containsAll(0, 3, 6) ||
        Player.playerX.containsAll(1, 4, 7) ||
        Player.playerX.containsAll(2, 5, 8) ||
        Player.playerX.containsAll(0, 4, 8) ||
        Player.playerX.containsAll(2, 4, 6)) {
      winner = 'X';
    } else if (Player.playerO.containsAll(0, 1, 2) ||
        Player.playerO.containsAll(3, 4, 5) ||
        Player.playerO.containsAll(6, 7, 8) ||
        Player.playerO.containsAll(0, 3, 6) ||
        Player.playerO.containsAll(1, 4, 7) ||
        Player.playerO.containsAll(2, 5, 8) ||
        Player.playerO.containsAll(0, 4, 8) ||
        Player.playerO.containsAll(2, 4, 6)) {
      winner = 'O';
    }

    return winner;
  }

  Future<void> autoPlay(String activePlayer) async {
    int index = 0;
    List<int> emptyCells = [];

    for (var i = 0; i < 9; i++) {
      if (!(Player.playerX.contains(i) || Player.playerO.contains(i))) {
        emptyCells.add(i);
      }
    }

    // Check if there are any winning moves for X
    for (int i = 0; i < emptyCells.length; i++) {
      int emptyIndex = emptyCells[i];
      Player.playerX.add(emptyIndex);
      if (checkWinner() == 'X') {
        index = emptyIndex;
        Player.playerX.remove(emptyIndex);
        break;
      }
      Player.playerX.remove(emptyIndex);
    }

    // If no winning moves for X, check if there are any winning moves for O
    if (index == 0) {
      for (int i = 0; i < emptyCells.length; i++) {
        int emptyIndex = emptyCells[i];
        Player.playerO.add(emptyIndex);
        if (checkWinner() == 'O') {
          index = emptyIndex;
          Player.playerO.remove(emptyIndex);
          break;
        }
        Player.playerO.remove(emptyIndex);
      }
    }

    // If no winning moves, select a random empty cell
    if (index == 0) {
      Random rand = Random();
      int randomIndex = rand.nextInt(emptyCells.length);
      index = emptyCells[randomIndex];
    }

    playGame(index, activePlayer);
  }
}